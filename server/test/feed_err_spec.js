TEST_USERS = require('/tmp/readerTestCreds.js');

var frisby = require('frisby');
var async = require('async');
var config = require('../config/environment');
var uri = config.test.apiServerURI;

var user = TEST_USERS[0];
var LONG_UNREAD_IDS_STR =
'sCWu7cKp1NuBDQqpRPfUUKwb6c86pPjzQu4vJSMJheatw2Sz1kvFRqKN5bbr9tnKXmKRFMbYQsW2vFw1cXuKzpN2UFrAya1VF4ajhY6nGj9QX2HUENX60INMqaeLyAjo97CEOnonBVMjY71XU71KcinKfwbLV6EkHeL6AaRhNRyqs7sqhQ7N7YvHUj1lXhCkJjn0sqYSMiqMiuBaoXjJIHKNqTDHlcP57F7DwOtFtwiJWXq0fsFUeYzpXtnogogsLtNl5Pu3AJTMg20kkiejOC5QUtEmSJCzmkAZU6OUcW1nmDFU2JOzqFVI25LhWRaqskMAAWtlFmXO1Vl7qXngLFob2lV6EAFwK8D5kbpLGJbrcz59ZPulK3SLfYAXOJvXGztGOlCfHek6I36K2U5XYXz8A035j8lyb461ARrUwjgSkqDXURwwE7jpUfflCXFnLQsZiO0T66HXZ3siPUIPC4IsrcMBObUtNUnvxE5iPQMUrXo5ILMGKIJDsejIEpzQ2CRFNj9sHy26Q6f5pzHCpT8HlQ3w1QHJyiobDBAy08DrU3Ol5hkWrvAYOoHaxGIYz6y27JhohDIe7VjcZbHX8yEJqUjJrufQXsWgDcmqgA9tjwRRfLwuCNkUgfNYL5r1Jai8GUk2nXygjEuN6ISEokB0XosuJApNLkPCfpe8j0ju7X6FpcjSezvhYbGZpyYvWaTV7xhUQz7P4GUv9AWabx74Z8bSwECntiTsKkzR3AKTpQXVA2cz1g5EJwc6IpGpk0mR2Za8zOPHYG2TbJmYGueWVO5bUaVE98kyImq2hO8ophMsf5C9aHtOygaAUt8IhS1eDlnR4f389rWSrmrZHj0tiMLhjtfpZZHLBUGS8kaphT33PsTXV4H6m4xyFOoNahLuj8CFbAmlVJj22XAYyVKOl015TCts0bboutiF4RNuEUxZCtwkfNCOBevjTKWO5R7QqqgWJyAMskI9K9qXAW8NGZ0WrnE5GbKxCmife8kHqQqmbyf0voZE0pHPlH84l';

frisby.create('GET invalid feed entries ' + user.email)
    .get(uri + '/feeds/1234/entries?unreadOnly=true')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectStatus(404)
    .expectJSON({'error' : 'User not subscribed to feed 1234'})
    .toss()

frisby.create('GET feed entries invalid includeUnreadIDs param ' + user.email)
    .get(uri + '/feeds?includeUnreadIDs=blah')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectStatus(400)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSON({'error' : 'includeUnreadIDs parameter must be true if set'})
    .toss()

frisby.create('GET feed entries unreadEntryIDs incorrect unreadOnly param part 1 ' + user.email)
    .get(uri + '/feeds?includeUnreadIDs=true')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('GET feed entries unreadEntryIDs incorrect unreadOnly param part 2 ' + user.email)
            .get(uri + '/feeds/' + res1.feeds[0]._id + '/entries?unreadOnly=false&unreadEntryIDs=' +
                 res1.feeds[0].unreadEntryIDs.slice(0,19).join())
            .addHeader('Authorization', 'Bearer ' + user.token)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'unreadOnly parameter must be true if unreadEntryIDs is set'})
            .toss()
    })
    .toss()

//// !! re-enable once we get more entries synced
//frisby.create('GET feed entries too many unreadEntryIDs part 1 ' + user.email)
//    .get(uri + '/feeds?includeUnreadIDs=true')
//    .addHeader('Authorization', 'Bearer ' + user.token)
//    .expectStatus(200)
//    .expectHeader('Content-Type', 'application/json; charset=utf-8')
//    .expectJSONLength('feeds', 2)
//    .expectJSONTypes('feeds.*', {unreadCount : Number})
//    .afterJSON(function getSingleFeed(res1) {
//        frisby.create('GET feed entries too many unreadEntryIDs part 2 ' + user.email)
//            .get(uri + '/feeds/' + res1.feeds[1]._id + '/entries?unreadOnly=true&unreadEntryIDs=' +
//                 res1.feeds[0].unreadEntryIDs.slice(0,21).join())
//            .addHeader('Authorization', 'Bearer ' + user.token)
//            .expectHeader('Content-Type', 'application/json; charset=utf-8')
//            .expectStatus(400)
//            .expectJSON({'error' : 'unreadEntryIDs parameter must be fewer than 20 entries'})
//            .toss()
//    })
//    .toss()

frisby.create('GET feed entries too long unreadEntryIDs string part 1 ' + user.email)
    .get(uri + '/feeds?includeUnreadIDs=true')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('GET feed entries too long unreadEntryIDs string part 2 ' + user.email)
            .get(uri + '/feeds/' + res1.feeds[0]._id + '/entries?unreadOnly=true&unreadEntryIDs=' +
                 LONG_UNREAD_IDS_STR)
            .addHeader('Authorization', 'Bearer ' + user.token)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'unreadEntryIDs parameter must be shorter than 1024 bytes'})
            .toss()
    })
    .toss()

frisby.create('GET feed entries missing unreadOnly param part 1 ' + user.email)
    .get(uri + '/feeds')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('GET feed entries missing unreadOnly param part 2 ' + user.email)
            .get(uri + '/feeds/' + res1.feeds[0]._id + '/entries')
            .addHeader('Authorization', 'Bearer ' + user.token)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'Undefined unreadOnly parameter'})
            .toss()
    })
    .toss()

frisby.create('GET feed entries invalid unreadOnly param part 1 ' + user.email)
    .get(uri + '/feeds')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('GET feed entries invalid unreadOnly param part 2 ' + user.email)
            .get(uri + '/feeds/' + res1.feeds[0]._id + '/entries?unreadOnly=blah')
            .addHeader('Authorization', 'Bearer ' + user.token)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'unreadOnly parameter must be either true or false'})
            .toss()
    })
    .toss()

frisby.create('PUT feeds missing read param part 1 ' + user.email)
    .get(uri + '/feeds')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feeds missing read param part 2 ' + user.email)
            .put(uri + '/feeds/' + res1.feeds[0]._id)
            .addHeader('Authorization', 'Bearer ' + user.token)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'Undefined read parameter'})
            .toss()
    })
    .toss()

frisby.create('PUT feeds invalid read param part 1 ' + user.email)
    .get(uri + '/feeds')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feeds invalid read param part 2 ' + user.email)
            .put(uri + '/feeds/' + res1.feeds[0]._id,
                 {'read' : 'blah'} )
            .addHeader('Authorization', 'Bearer ' + user.token)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'read parameter must be true'})
            .toss()
    })
    .toss()

frisby.create('PUT feeds invalid feedID part 1 ' + user.email)
    .get(uri + '/feeds')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feeds invalid feedID part 2 ' + user.email)
            .put(uri + '/feeds/1234',
                 {'read' : true})
            .addHeader('Authorization', 'Bearer ' + user.token)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(404)
            .expectJSON({'error' : 'User not subscribed to feed 1234'})
            .toss()
    })
    .toss()

frisby.create('PUT feed entry missing read param part 1 ' + user.email)
    .get(uri + '/feeds')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feed entry missing read param part 2 ' + user.email)
            .put(uri + '/feeds/' + res1.feeds[0]._id + '/entries/1234')
            .addHeader('Authorization', 'Bearer ' + user.token)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'Undefined read parameter'})
            .toss()
    })
    .toss()

frisby.create('PUT feed entry invalid read param part 1 ' + user.email)
    .get(uri + '/feeds')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feeds invalid read param part 2 ' + user.email)
            .put(uri + '/feeds/' + res1.feeds[0]._id + '/entries/1234',
                 {'read' : 'blah'} )
            .addHeader('Authorization', 'Bearer ' + user.token)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(400)
            .expectJSON({'error' : 'read parameter must be either true or false'})
            .toss()
    })
    .toss()

frisby.create('PUT feed entry invalid feedID part 1 ' + user.email)
    .get(uri + '/feeds')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feeds invalid feedID part 2 ' + user.email)
            .put(uri + '/feeds/1234/entries/1234',
                 {'read' : 'true'} )
            .addHeader('Authorization', 'Bearer ' + user.token)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(404)
            .expectJSON({'error' : 'User not subscribed to feed 1234'})
            .toss()
    })
    .toss()

frisby.create('PUT feed entry invalid entryID part 1 ' + user.email)
    .get(uri + '/feeds')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('PUT feeds invalid entryID part 2 ' + user.email)
            .put(uri + '/feeds/' + res1.feeds[0]._id + '/entries/1234',
                 {'read' : 'true'} )
            .addHeader('Authorization', 'Bearer ' + user.token)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectStatus(404)
            .expectJSON({'error' : 'Error finding entryID 1234'})
            .toss()
    })
    .toss()

frisby.create('GET feed list for user ' + user.email)
    .get(uri + '/feeds')
    .addHeader('Authorization', 'Bearer ' + user.token)
    .expectStatus(200)
    .expectHeader('Content-Type', 'application/json; charset=utf-8')
    .expectJSONLength('feeds', 2)
    .expectJSONTypes('feeds.*', {unreadCount : Number})
    .afterJSON(function getSingleFeed(res1) {
        frisby.create('GET second feed for user ' + user.email)
            .get(uri + '/feeds/' + res1.feeds[1]._id + '/entries?unreadOnly=true')
            .addHeader('Authorization', 'Bearer ' + user.token)
            .expectStatus(200)
            .expectHeader('Content-Type', 'application/json; charset=utf-8')
            .expectJSONLength('feed.unreadEntries', res1.feeds[1].unreadCount)
            .afterJSON(function markEntryRead(res2) {
                frisby.create('PUT mark entry read with wrong feedID for user ' + user.email)
                    .put(uri + '/feeds/' + res1.feeds[0]._id + '/entries/' + res2.feed.unreadEntries[0]._id,
                         {'read' : 'true'})
                    .addHeader('Authorization', 'Bearer ' + user.token)
                    .expectStatus(404)
                    .expectHeader('Content-Type', 'application/json; charset=utf-8')
                    .expectJSON({'error' :
                                 'Entry ' + res2.feed.unreadEntries[0]._id
                                 + ' is part of feed ' + res1.feeds[1]._id
                                 + ' not part of feed ' + res1.feeds[0]._id})
                    .toss()
            })
            .toss()
    })
    .toss()
